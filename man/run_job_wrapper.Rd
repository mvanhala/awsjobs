% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_job_wrapper.R
\name{run_job_wrapper}
\alias{run_job_wrapper}
\title{Run R worker job}
\usage{
run_job_wrapper(
  script,
  memory,
  cpu,
  spot,
  image_id = Sys.getenv("AWS_R_IMAGE"),
  efs_name = Sys.getenv("AWS_R_EFS_ID"),
  security_group_id = Sys.getenv("AWS_R_SECURITY_GROUP"),
  ssm_iam_profile = Sys.getenv("AWS_R_SSM_PROFILE"),
  efs_mnt_pt = "/efs",
  region = "us-west-2",
  instance_max_hours = 24,
  exec_timeout_hours = 24,
  r_version = as.character(getRversion()),
  ssm_work_dir = efs_mnt_pt,
  log_file = NULL,
  rmd_opts = list(),
  job_name = script,
  job_run_dir = getwd()
)
}
\arguments{
\item{script}{Path to the R script or R Markdown document to execute (on EFS storage)}

\item{memory}{Minimum memory (in GB) desired}

\item{cpu}{Minimum number of CPU cores desired}

\item{spot}{Logical, whether to run a spot instance}

\item{image_id}{id of the AMI to launch}

\item{efs_name}{EFS id}

\item{security_group_id}{Security group id}

\item{ssm_iam_profile}{Name of IAM profile with SSM permissions. This profile will be
attached to the launched EC2 instance.}

\item{efs_mnt_pt}{Mount point of EFS storage on worker instance}

\item{region}{AWS EC2 region}

\item{instance_max_hours}{Maximum lifetime of the instance in hours before it will
automatically shut down}

\item{exec_timeout_hours}{Number of hours for timeout of the SSM command for executing
the script}

\item{r_version}{Version of R to use}

\item{ssm_work_dir}{Working directory of SSM command for executing R script/document}

\item{log_file}{Path of log file to which stdout/stderr of R script will be written}

\item{rmd_opts}{If running an R Markdown document, optional parameters for the output file path
and document parameters}

\item{job_name}{Name of the job}

\item{job_run_dir}{Working directory for the RStudio Job that is launched (should not need to change)}
}
\description{
This is a convenience function for running an R script or R Markdown document on
an EC2 worker instance. The user just has to provide the script/document to execute,
the desired memory and cpu, and whether to execute as a spot instance.
Other parameters are filled with defaults passed to \code{\link[=run_job]{run_job()}}.
}
\details{
Some parameters, such as the image id, EFS id, security group id, and SSM IAM profile
to attach to the launched instance, are assumed to be stored in environment variables.
The user could put these in a configuration file or otherwise set these environment
variables, or simply override them in invoking the function.

The user specifies an amount of memory and CPU and whether to use a spot instance.
The function then determines the optimal spot (or on-demand) instance to use.

This function does not block the running R session. What it does is launch an
RStudio Job in a child process. Information about the running job is displayed in the
RStudio Jobs pane. However, note that the user should \emph{not} user the stop button
to stop a running job. This will leave the running EC2 instance severed/orphaned and
it will keep running without any connection to the R process. Because the instance
has a maximum lifetime set when launched, the instance won't keep running forever, and
will shutdown when the maximum is reached (or the ordinary execution on the instances finishes).
Nonetheless, the user will instead want to call \code{\link[=stop_job]{stop_job()}}, providing the job id
printed in the RStudio Jobs pane to send an interrupt to the child R process which will
trigger the termination of the running EC2 worker instance.
}
